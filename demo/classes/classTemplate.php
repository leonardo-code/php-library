<?php

// classTemplate 1.22
// GNU Public License
// This software is released under the GPL v3.0 license from the Free Software Foundation. 



/**
*   Splitting php and html code
*   Version 1.22
*  
*   If you know HTML::Template perl module, 
*   you know how can be clear the distinction between programming logic and html code.
*   This HTML Templating module replaces HTML-like tags with values specified through the php program.
*   HTML-like tags are the same used in HTML::Template.pm,
*   so your HTML file works equally with perl and with php code.
*/
class classTemplate {

  // properties

  var $matches = array();
  var $toprint = "";
  var $html_name = "";
  var $rows_array = array();
  var $row = "";
  var $nextwhile = 0;

  var $second_part = "";
  var $len_row = 0;
  var $len_second_part = 0;
  var $len_first_part = 0;
  var $first_part = "";
  var $arrow_start = "";
  var $tag_len = 0;
  var $loop_deep = 0;

  var $file_included = "";
  var $fp;
  var $tmplvarrows = "";
  
  var $disclaimer;
  var $version = "Version 1.22";
  var $open_tag = "<?php ";
  var $close_tag = " ?>";
  var $php_extension = ".php";
  var $class_name = "classTemplate"; 
  var $class_dir = "class/";
  var $template_dir = "tmpl/";
  var $compiled_dir = "compiled/";

  var $html_time = 0;
  var $compiled_time = 0;
  var $class_time = 0;
	
  var $if_statement = "";
  var $setvalue_array = "";
  var $ifisarray = "";
  var $setvalue_keys = "";
  var $param_name = "";
  var $param_value = "";
  var $var_array = array();

  var $error_code = "";  
  var $msg_error = "";  
  var $return = 1;  

  // methods of this class

  /**
  function classTemplate()        the constructor
  function mixPhpHtml()           putting together php script and html file
  function substitute_var_tag()   substituting TMPL_VAR tag
  function substitute_if_tag()    substituting TMPL_IF tag
  function substitute_loop_tag()  substituting TMPL_LOOP tag
  function setHtmlName()          setting the name of html file
  function printError()           printing an error
  function array_keys_toupper()   upper case to array keys
  function param()                used to set parameters
  function changed()              check if files changed
  function output()               printing the output
  */

  function classTemplate() {
  	$this->disclaimer = "\n\n		<!-- File generated by classTemplate.php tool. ";
  	$this->disclaimer .= $this->version." -->\n\n\n";
  }

  function mixPhpHtml() {
    $this->matches=array();
    if (!$this->html_name){
      $this->error_code = "Code : 002.";
      $this->msg_error = "Template name error: file not found.";
      $this->printError();
    }
  
    $this->rows_array = file($this->template_dir.$this->html_name);

    // read one row at time
    foreach ($this->rows_array as $this->row) {
      $this->nextwhile = 1;
    
      // looping a row to intercept TMPL tags
      while ($this->nextwhile) {

        // getting the part after TMPL_ 
        // we don't know if before there is < or </                
        $this->second_part = stristr($this->row, "TMPL_");
        if (!$this->second_part) {
          $this->toprint .= $this->row;
          break;
        }
        $this->nextwhile = 0;
        $this->len_row = strlen($this->row);

        // getting the part before TMPL_
        $this->len_second_part = strlen($this->second_part);
        $this->len_first_part = $this->len_row - $this->len_second_part;
        $this->first_part = substr($this->row, 0, $this->len_first_part);

        // checking what tag is TMPL, if it starts with < or </
        $this->arrow_start = substr($this->first_part, -1);
        if ($this->arrow_start == "<") {
          $this->tag_len = 1;
        } else {
          $arrow_end = substr($this->first_part, -2);
          if ($arrow_end == "</"){
            $this->tag_len = 2;
          }
        }

        // now we can split the first and second part the tag,
        // the second is <TMPL_ or </TMPL_
        $this->len_second_part = strlen($this->second_part) + $this->tag_len;
        $this->len_first_part = $this->len_row - $this->len_second_part;
        $this->first_part = substr($this->row, 0, $this->len_first_part);
        $this->second_part = substr($this->row, $this->len_first_part, $this->len_second_part);

        // sending the first part to print
        // elaborating the second one, including the TMPL tag
        $this->toprint .= $this->first_part;
        $this->row = $this->second_part;


        //if (preg_match("/^\<TMPL_VAR\s+NAME=([A-Za-z0-9\_\"\']+)\>(.*)/i",
        if (preg_match("/^\<TMPL_VAR\s+NAME=([A-Za-z0-9\_\"\']+)\>(.*)/s",
            $this->row, $this->matches)) {
          $this->matches[1] = preg_replace('/\"/', '', $this->matches[1]);
          $this->matches[1] = preg_replace('/\'/', '', $this->matches[1]);
          $this->substitute_var_tag($this->matches[1]);
          $this->row = $this->matches[2];
          $this->nextwhile = 1;
          continue;
        }

        if (preg_match("/^\<TMPL_IF\s+NAME=([A-Za-z0-9\_\"\']+)\>(.*)$/s",
            $this->row, $this->matches)) {
          $this->matches[1] = preg_replace('/\"/', '', $this->matches[1]);
          $this->matches[1] = preg_replace('/\'/', '', $this->matches[1]);
          $this->substitute_if_tag($this->matches[1]);
          $this->row = $this->matches[2];
          $this->nextwhile = 1;
          continue;
        }

        if (preg_match("/^\<TMPL_ELSE\>(.*)$/s",
            $this->row, $this->matches)) {
          $this->toprint .= $this->open_tag." } else { ".$this->close_tag."\n";
          $this->row = $this->matches[1];
          $this->nextwhile = 1;
          continue;
        }

        if (preg_match("/^\<\/TMPL_IF\>(.*)$/s",
            $this->row, $this->matches) ) {
          $this->toprint .= $this->open_tag." } ".$this->close_tag."\n";
          $this->row = $this->matches[1];
          $this->nextwhile = 1;
          continue;
        }

        if (preg_match("/^\<TMPL_LOOP\s+NAME=([A-Za-z0-9\_\"\']+)\>(.*)$/s",
            $this->row, $this->matches)) {
          $this->matches[1] = preg_replace('/\"/', '', $this->matches[1]);
          $this->matches[1] = preg_replace('/\'/', '', $this->matches[1]);
					$this->loop_deep++;
          $this->substitute_loop_tag($this->matches[1]);
          $this->row = $this->matches[2];
          $this->nextwhile = 1;
          continue;
        }

       if (preg_match("/^\<\/TMPL_LOOP\>(.*)$/s",
						$this->row, $this->matches)) {
          $this->toprint .= $this->open_tag."   \n } \n } ".$this->close_tag."\n";
          $this->row = $this->matches[1];
					$this->loop_deep--;
          $this->nextwhile = 1;
          continue;
        }

        if (preg_match("/^\<TMPL_INCLUDE\s+NAME=([A-Za-z0-9\_\"\'\.\/]+)\>(.*)$/s",
            $this->row, $this->matches)) {
          $this->matches[1] = preg_replace('/\"/', '', $this->matches[1]);
          $this->matches[1] = preg_replace('/\'/', '', $this->matches[1]);
          $this->file_included = $this->matches[1];
          $this->row = implode('', file($this->file_included));
          $this->row .= $this->matches[2];
          $this->nextwhile = 1;
          continue;
        }

      }
    }


    $this->fp = fopen($this->template_dir.$this->compiled_dir.$this->html_name.$this->php_extension, "w");
    if (!$this->fp) {
      $this->error_code = "Code : 003.";
      $this->msg_error = "Error file open.";
      $this->printError();
    }

    fwrite($this->fp, $this->toprint);
    fwrite($this->fp, $this->disclaimer);
    fclose($this->fp);
    $this->toprint = "";
    return;
  }

  /* Generates the tmpl_var tag which varies if we are in a loop(s) */
  function substitute_var_tag($r) {
    $this->tmplvarrows = "";
    $r = strtoupper($r);
    if ($this->loop_deep > 0) {
      $this->tmplvarrows = $this->open_tag." print \$array_loop".$this->loop_deep."['".$r."'][\$i".$this->loop_deep."]; ";
    } else {
    	$this->tmplvarrows = $this->open_tag." print \$this->var_array['".$r."']; ";
    }
    $this->tmplvarrows .= $this->close_tag."\n";
    $this->toprint .= $this->tmplvarrows;
    return;
  }
    
  /* Generate the start if rows */
  function substitute_if_tag($r) {
    $this->if_statement = "";
    $r = strtoupper($r);

    if ($this->loop_deep > 0) {
      $this->if_statement .= $this->open_tag." if (\$array_loop".$this->loop_deep."['".$r."'][\$i".$this->loop_deep."]) { ";
    } else {
      $this->if_statement .= $this->open_tag." if (\$this->var_array['".$r."']) { ";
    }

    //  $this->if_statement .= $this->open_tag." if (\$this->var_array['".$r."']) { ";
    $this->if_statement .= $this->close_tag."\n";
    $this->toprint .= $this->if_statement;
    return;
  }

  /* Generate the start loop rows */
  function substitute_loop_tag($r) {
    $this->if_statement = "";
    $r = strtoupper($r);
    
    if ($this->loop_deep > 1) {
      $this->setvalue_array = "\n  \$array_loop".$this->loop_deep." = \$array_loop".($this->loop_deep-1)."['".$r."'][\$i".($this->loop_deep-1)."]; \n";
    } else {
      $this->setvalue_array = "\n  \$array_loop".$this->loop_deep." = \$this->var_array['".$r."']; \n";
    }

    $this->ifisarray = " if (is_array(\$array_loop".$this->loop_deep.")) {\n";
    $this->setvalue_keys = "\n  \$array_key".$this->loop_deep." = key(\$array_loop".$this->loop_deep."); \n";
    $this->if_statement .= $this->open_tag.$this->setvalue_array;
    $this->if_statement .= $this->ifisarray.$this->setvalue_keys;
    $ciclo = " for (\$i".$this->loop_deep."=0; \$i".$this->loop_deep."<sizeof(\$array_loop".$this->loop_deep."[\$array_key".$this->loop_deep."]); \$i".$this->loop_deep."++){ \n ";
    $this->if_statement .= $ciclo." \n ".$this->close_tag." \n ";

    $this->toprint .= $this->if_statement;
    return;
  }

  // Set the template name 
  function setHtmlName($html) {
    $this->html_name = $html;
    if (!file_exists($this->template_dir.$this->html_name)){
      $this->error_code = "Code : 001.";
      $this->msg_error = "Template name error: file not found.";
      $this->printError();
    }    
    return $this->return;
  }

  // Print error type and exit
  function printError(){
    echo "<b>Class \"".$this->class_name."\".</b><br>".$this->msg_error;
    echo "<br>".$this->error_code;
    exit;
  }
  
  // Multidimensional Array, set keys upper case
  function array_keys_toupper(& $array_upper) {

    $array_upper = array_change_key_case($array_upper, CASE_UPPER); 
    
    for ($i = 0, $array_key = array_keys($array_upper); $i < count($array_upper); $i++){
      $key = $array_key[$i];

      $value =& $array_upper[$key];
      if (is_array($value)) {
        $value =$this->array_keys_toupper($value);
       }
     }      
    return $array_upper;
  }  
  
  // Set a new parameter
  function param($parameter, $parameter_value) {
    $this->param_name = strtoupper($parameter);
    $this->param_value = $parameter_value;

    if (is_array($this->param_value)) {
    // strtoupper applied to a multidim. array
      $this->param_value =$this->array_keys_toupper($this->param_value);
    }
    
    $this->var_array[$this->param_name]=$this->param_value;
    return $this->return;
  }
 
  // Check if files changed
  function changed() {
    if (file_exists($this->template_dir.$this->compiled_dir.$this->html_name.$this->php_extension)){
    
      $this->html_time = @filemtime($this->template_dir.$this->html_name);
      $this->compiled_time = @filemtime($this->template_dir.$this->compiled_dir.$this->html_name.$this->php_extension);
      $this->class_time = @filemtime($this->class_dir.$this->class_name.$this->php_extension);
  
      // html changed - compile
      if ($this->html_time > $this->compiled_time){
        return $this->return;
      }
      
      // classTemplate changed - compile
      if ($this->class_time > $this->compiled_time){
        return $this->return;
      }
    } else {
      return $this->return;
    }
    
    return;
  }
  
  // Print output
  function output() {
    
    //if ($this->changed()){
      $this->mixPhpHtml();
    //}
    include($this->template_dir.$this->compiled_dir.$this->html_name.$this->php_extension);
    return $this->return;
  }
	// End of class
}
?>
